// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_db;

namespace web_db.Migrations
{
    [DbContext(typeof(sardweb_Context))]
    [Migration("20201210134946_temp4")]
    partial class temp4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("web_db.TblCar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<byte[]>("Img")
                        .HasColumnType("image");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit")
                        .HasColumnName("isDel");

                    b.Property<decimal>("PriceTowBascol")
                        .HasColumnType("decimal(21,3)")
                        .HasColumnName("priceTowBascol");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("TblCar");
                });

            modelBuilder.Entity("web_db.TblConfig", b =>
                {
                    b.Property<string>("ApiPass")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApiUrlPaivest")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApiUser")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DegatBascul")
                        .HasColumnType("int")
                        .HasColumnName("degatBascul");

                    b.Property<string>("KindOtherSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("kindOtherSystem");

                    b.Property<int?>("SalMaliMain")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.ToTable("TblConfig");
                });

            modelBuilder.Entity("web_db.TblContract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Azdate")
                        .HasColumnType("date")
                        .HasColumnName("azdate");

                    b.Property<double>("Code")
                        .HasColumnType("float")
                        .HasColumnName("code");

                    b.Property<long?>("CountMaxIn")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountMaxOut")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<DateTime>("Dateadd")
                        .HasColumnType("datetime")
                        .HasColumnName("dateadd");

                    b.Property<DateTime?>("Dateedit")
                        .HasColumnType("datetime")
                        .HasColumnName("dateedit");

                    b.Property<Guid>("FkContractType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContractType");

                    b.Property<Guid>("FkCustomer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustomer");

                    b.Property<int>("FkSalmali")
                        .HasColumnType("int")
                        .HasColumnName("fkSalmali");

                    b.Property<Guid>("FkUsAdd")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsAdd");

                    b.Property<Guid?>("FkUsEdit")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsEdit");

                    b.Property<bool?>("IsEndVrud")
                        .HasColumnType("bit")
                        .HasColumnName("isEndVrud");

                    b.Property<bool?>("IsEndXroj")
                        .HasColumnType("bit")
                        .HasColumnName("isEndXroj");

                    b.Property<int?>("PercentForOut")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceOfBoxIn")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfBoxIn");

                    b.Property<decimal>("PriceOfBoxOut")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfBoxOut");

                    b.Property<decimal>("PriceOfKiloIn")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfKiloIn");

                    b.Property<decimal>("PriceOfKiloOut")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfKiloOut");

                    b.Property<bool?>("SendSms")
                        .HasColumnType("bit")
                        .HasColumnName("sendSms");

                    b.Property<long?>("SumInCount")
                        .HasColumnType("bigint")
                        .HasColumnName("_SumInCount");

                    b.Property<decimal?>("SumInWeight")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("_SumInWeight");

                    b.Property<long?>("SumOutCount")
                        .HasColumnType("bigint")
                        .HasColumnName("_SumOutCount");

                    b.Property<decimal?>("SumOutWeight")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("_SumOutWeight");

                    b.Property<DateTime?>("Tadate")
                        .HasColumnType("date")
                        .HasColumnName("tadate");

                    b.Property<string>("Txt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("txt");

                    b.Property<decimal?>("WeightMaxIn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("WeightMaxOut")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkContractType");

                    b.HasIndex(new[] { "FkCustomer", "Code" }, "IX_TblContract")
                        .IsUnique();

                    b.HasIndex(new[] { "FkSalmali", "FkContractType" }, "IX_TblContract_1");

                    b.HasIndex(new[] { "FkCustomer" }, "IX_TblContract_2");

                    b.ToTable("TblContract");
                });

            modelBuilder.Entity("web_db.TblContractPacking", b =>
                {
                    b.Property<Guid>("FkContract")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContract");

                    b.Property<Guid>("FkPacking")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPacking");

                    b.HasKey("FkContract", "FkPacking");

                    b.HasIndex("FkPacking");

                    b.ToTable("TblContractPacking");
                });

            modelBuilder.Entity("web_db.TblContractProduct", b =>
                {
                    b.Property<Guid>("FkContract")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContract");

                    b.Property<Guid>("FkProduct")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkProduct");

                    b.HasKey("FkContract", "FkProduct");

                    b.HasIndex("FkProduct");

                    b.ToTable("TblContractProduct");
                });

            modelBuilder.Entity("web_db.TblContractType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<int>("FkSalmali")
                        .HasColumnType("int")
                        .HasColumnName("fkSalmali");

                    b.Property<bool>("IsEntry")
                        .HasColumnType("bit")
                        .HasColumnName("isEntry");

                    b.Property<bool>("IsExit")
                        .HasColumnType("bit")
                        .HasColumnName("isExit");

                    b.Property<bool>("IsMali")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduct1Packing0")
                        .HasColumnType("bit")
                        .HasColumnName("isProduct1Packing0");

                    b.Property<int>("LocationLvlRequired")
                        .HasColumnType("int");

                    b.Property<bool>("NeedLocation")
                        .HasColumnType("bit");

                    b.Property<bool>("Needbascule")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtSanadByGroup")
                        .HasColumnType("bit");

                    b.Property<string>("OtbasculkalaCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTbasculkalaCode");

                    b.Property<string>("OtcodHesabFactor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodHesabFactor");

                    b.Property<string>("OtcodHesabKargar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodHesabKargar");

                    b.Property<int?>("OtcodeMarkaz")
                        .HasColumnType("int")
                        .HasColumnName("OTcodeMarkaz");

                    b.Property<int?>("OttypeFaktor")
                        .HasColumnType("int")
                        .HasColumnName("OTtypeFaktor");

                    b.Property<int?>("OttypeFaktorInBack")
                        .HasColumnType("int")
                        .HasColumnName("OTtypeFaktorInBack");

                    b.Property<int?>("OttypeFaktorOut")
                        .HasColumnType("int")
                        .HasColumnName("OTtypeFaktorOut");

                    b.Property<int?>("OttypeFaktorOutBack")
                        .HasColumnType("int")
                        .HasColumnName("OTtypeFaktorOutBack");

                    b.Property<bool>("OutControlByContract")
                        .HasColumnType("bit")
                        .HasColumnName("outControlByContract");

                    b.Property<bool>("OutControlByLocation")
                        .HasColumnType("bit")
                        .HasColumnName("outControlByLocation");

                    b.Property<bool>("OutControlByPercent")
                        .HasColumnType("bit")
                        .HasColumnName("outControlByPercent");

                    b.Property<decimal?>("PriceOfBoxInKargar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfBoxInKargar")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("PriceOfBoxOutKargar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfBoxOutKargar")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("PriceOfKiloInKargar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfKiloInKargar")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("PriceOfKiloOutKargar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("priceOfKiloOutKargar")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("FkSalmali");

                    b.ToTable("TblContractType");
                });

            modelBuilder.Entity("web_db.TblCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Addras")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("addras");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Dateloginlast")
                        .HasColumnType("datetime")
                        .HasColumnName("dateloginlast");

                    b.Property<DateTime?>("Datesendpassword")
                        .HasColumnType("datetime")
                        .HasColumnName("datesendpassword");

                    b.Property<int>("FkSalmali")
                        .HasColumnType("int")
                        .HasColumnName("fkSalmali");

                    b.Property<string>("IdOtherSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("idOtherSystem");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit")
                        .HasColumnName("isEnable");

                    b.Property<string>("Mob")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mob");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FkSalmali" }, "IX_TblCustomer");

                    b.ToTable("TblCustomer");
                });

            modelBuilder.Entity("web_db.TblCustomerGroup", b =>
                {
                    b.Property<Guid>("FkCustumer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustumer");

                    b.Property<Guid>("FkGroup")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkGroup");

                    b.HasKey("FkCustumer", "FkGroup");

                    b.HasIndex("FkGroup");

                    b.ToTable("TblCustomerGroup");
                });

            modelBuilder.Entity("web_db.TblGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Class")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("class");

                    b.Property<Guid?>("Fklocation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fklocation");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Fklocation" }, "IX_TblGroup");

                    b.HasIndex(new[] { "IsActive" }, "IX_TblGroup_1");

                    b.ToTable("TblGroup");
                });

            modelBuilder.Entity("web_db.TblInjury", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<int>("Ord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ord")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("TblInjury");
                });

            modelBuilder.Entity("web_db.TblLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<string>("CodeFull")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("FkP")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkP");

                    b.Property<bool>("ForProduct")
                        .HasColumnType("bit")
                        .HasColumnName("forProduct");

                    b.Property<bool>("Isdell")
                        .HasColumnType("bit")
                        .HasColumnName("isdell");

                    b.Property<int>("Kind")
                        .HasColumnType("int")
                        .HasColumnName("kind");

                    b.Property<int>("Ord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ord")
                        .UseIdentityColumn();

                    b.Property<int?>("OtcodeAnbar")
                        .HasColumnType("int")
                        .HasColumnName("OTcodeAnbar");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<decimal?>("Wight")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("wight");

                    b.HasKey("Id");

                    b.HasIndex("FkP");

                    b.HasIndex(new[] { "Code", "FkP" }, "IX_TblLocation")
                        .IsUnique()
                        .HasFilter("[fkP] IS NOT NULL");

                    b.ToTable("TblLocation");
                });

            modelBuilder.Entity("web_db.TblPacking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<bool>("ForProduct")
                        .HasColumnType("bit")
                        .HasColumnName("forProduct");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsNotAc")
                        .HasColumnType("bit")
                        .HasColumnName("IsNotAC");

                    b.Property<string>("OtcodeKala")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodeKala");

                    b.Property<string>("OtcodeKalaAcc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodeKalaAcc");

                    b.Property<int?>("OtcodeVahedShomaresh")
                        .HasColumnType("int")
                        .HasColumnName("OTcodeVahedShomaresh");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<decimal>("WightEmpty")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("WightFull")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_TblPacking")
                        .IsUnique();

                    b.ToTable("TblPacking");
                });

            modelBuilder.Entity("web_db.TblPortage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CarMashin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("carMashin");

                    b.Property<string>("CarRanande")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("carRanande");

                    b.Property<string>("CarShMashin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("carShMashin");

                    b.Property<string>("CarTell")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("carTell");

                    b.Property<long>("Code")
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<DateTime>("Date1")
                        .HasColumnType("datetime")
                        .HasColumnName("date1");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime")
                        .HasColumnName("date2");

                    b.Property<DateTime>("Dateadd1")
                        .HasColumnType("datetime")
                        .HasColumnName("dateadd1");

                    b.Property<DateTime?>("Dateadd2")
                        .HasColumnType("datetime")
                        .HasColumnName("dateadd2");

                    b.Property<DateTime?>("Dateedit1")
                        .HasColumnType("datetime")
                        .HasColumnName("dateedit1");

                    b.Property<DateTime?>("Dateedit2")
                        .HasColumnType("datetime")
                        .HasColumnName("dateedit2");

                    b.Property<Guid?>("FkCar")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCar");

                    b.Property<Guid>("FkContracttype")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContracttype");

                    b.Property<Guid>("FkCustomer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustomer");

                    b.Property<int>("FkSalmali")
                        .HasColumnType("int")
                        .HasColumnName("fkSalmali");

                    b.Property<Guid>("FkUsAdd1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsAdd1");

                    b.Property<Guid?>("FkUsAdd2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsAdd2");

                    b.Property<Guid?>("FkUsEdit1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsEdit1");

                    b.Property<Guid?>("FkUsEdit2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsEdit2");

                    b.Property<Guid?>("FkUsPermit")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUsPermit");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermitOk")
                        .HasColumnType("bit")
                        .HasColumnName("IsPermitOK");

                    b.Property<int>("KindCode")
                        .HasColumnType("int");

                    b.Property<string>("KindTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtcodeResid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodeResid");

                    b.Property<long?>("PackingCount")
                        .HasColumnType("bigint")
                        .HasColumnName("packingCount");

                    b.Property<double?>("PackingOfWeight")
                        .HasColumnType("float")
                        .HasColumnName("packingOfWeight");

                    b.Property<bool?>("SaveFaktor")
                        .HasColumnType("bit")
                        .HasColumnName("saveFaktor");

                    b.Property<bool?>("SmsOk")
                        .HasColumnType("bit");

                    b.Property<string>("SmsVaziat")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal?>("SumMoney")
                        .HasColumnType("decimal(22,4)")
                        .HasColumnName("sumMoney");

                    b.Property<string>("Txt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("txt");

                    b.Property<string>("TxtPermit")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("txtPermit");

                    b.Property<decimal?>("Weight1")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weight1");

                    b.Property<bool?>("Weight1IsBascul")
                        .HasColumnType("bit")
                        .HasColumnName("weight1IsBascul");

                    b.Property<decimal?>("Weight2")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weight2");

                    b.Property<bool?>("Weight2IsBascul")
                        .HasColumnType("bit")
                        .HasColumnName("weight2IsBascul");

                    b.Property<decimal?>("WeightNet")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weightNet");

                    b.HasKey("Id");

                    b.HasIndex("FkCar");

                    b.HasIndex("FkContracttype");

                    b.HasIndex("FkCustomer");

                    b.HasIndex(new[] { "FkSalmali", "FkContracttype", "KindCode", "IsEnd", "IsDel", "Code" }, "IX_TblPortage");

                    b.ToTable("TblPortage");
                });

            modelBuilder.Entity("web_db.TblPortageDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<Guid>("FkPortage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortage");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("image");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("kind");

                    b.HasKey("Id");

                    b.HasIndex("FkPortage");

                    b.ToTable("TblPortageDocument");
                });

            modelBuilder.Entity("web_db.TblPortageInjury", b =>
                {
                    b.Property<Guid>("FkPortage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortage");

                    b.Property<Guid>("FkInjury")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkInjury");

                    b.HasKey("FkPortage", "FkInjury");

                    b.HasIndex("FkInjury");

                    b.ToTable("TblPortageInjury");
                });

            modelBuilder.Entity("web_db.TblPortageMoney", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<Guid>("FkCar")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCar");

                    b.Property<Guid?>("FkContract")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContract");

                    b.Property<Guid>("FkContractType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContractType");

                    b.Property<Guid>("FkCustomer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustomer");

                    b.Property<Guid?>("FkPacking")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPacking");

                    b.Property<Guid>("FkPortage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortage");

                    b.Property<Guid?>("FkProduct")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkProduct");

                    b.Property<Guid?>("Fklocation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fklocation");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("kind");

                    b.Property<decimal>("PriceOneWeight")
                        .HasColumnType("decimal(22,2)");

                    b.Property<decimal>("PriceSum")
                        .HasColumnType("decimal(22,2)");

                    b.Property<string>("Txt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("txt");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(22,2)");

                    b.HasKey("Id");

                    b.HasIndex("FkContract");

                    b.HasIndex("FkCustomer");

                    b.HasIndex("FkPortage");

                    b.ToTable("TblPortageMoney");
                });

            modelBuilder.Entity("web_db.TblPortageRow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<long>("Code")
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<string>("CodeLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeLocation");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<Guid?>("FkContract")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContract");

                    b.Property<Guid?>("FkContractType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContractType");

                    b.Property<Guid?>("FkLocation1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation1");

                    b.Property<Guid?>("FkLocation2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation2");

                    b.Property<Guid?>("FkLocation3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation3");

                    b.Property<Guid?>("FkPacking")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPacking");

                    b.Property<Guid?>("FkPortage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortage");

                    b.Property<Guid?>("FkProduct")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkProduct");

                    b.Property<Guid>("FkUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUser");

                    b.Property<bool>("IsNimPalet")
                        .HasColumnType("bit")
                        .HasColumnName("isNimPalet");

                    b.Property<string>("Txt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("txt");

                    b.Property<double?>("WeightOne")
                        .HasColumnType("float")
                        .HasColumnName("weightOne");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FkPacking" }, "IX_TblPortageRow");

                    b.HasIndex(new[] { "FkProduct" }, "IX_TblPortageRow_1");

                    b.HasIndex(new[] { "FkPortage" }, "IX_TblPortageRow_2");

                    b.HasIndex(new[] { "FkContract" }, "IX_TblPortageRow_3");

                    b.HasIndex(new[] { "FkPortage", "FkContract" }, "IX_TblPortageRow_4");

                    b.HasIndex(new[] { "FkContractType", "FkPortage", "FkContract" }, "IX_TblPortageRow_5");

                    b.ToTable("TblPortageRow");
                });

            modelBuilder.Entity("web_db.TblPortageRowInjury", b =>
                {
                    b.Property<Guid>("FkInjury")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkInjury");

                    b.Property<Guid>("FkPortageRow")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortageRow");

                    b.HasKey("FkInjury", "FkPortageRow");

                    b.HasIndex("FkPortageRow");

                    b.ToTable("TblPortageRowInjury");
                });

            modelBuilder.Entity("web_db.TblProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool?>("IsNotAc")
                        .HasColumnType("bit")
                        .HasColumnName("IsNotAC");

                    b.Property<int>("Ord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ord")
                        .UseIdentityColumn();

                    b.Property<string>("OtcodeKala")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodeKala");

                    b.Property<string>("OtcodeKalaAcc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OTcodeKalaAcc");

                    b.Property<int?>("OtcodeVahedShomaresh")
                        .HasColumnType("int")
                        .HasColumnName("OTcodeVahedShomaresh");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("TblProduct");
                });

            modelBuilder.Entity("web_db.TblSalMali", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit")
                        .HasColumnName("isOpen");

                    b.Property<bool>("IsOrginal")
                        .HasColumnType("bit");

                    b.Property<string>("Sal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("sal");

                    b.Property<DateTime>("SalAz")
                        .HasColumnType("date")
                        .HasColumnName("salAz");

                    b.Property<DateTime>("SalTa")
                        .HasColumnType("date")
                        .HasColumnName("salTa");

                    b.HasKey("Id");

                    b.ToTable("TblSalMali");
                });

            modelBuilder.Entity("web_db.TblStoreLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountIn")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountMovement")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountOut")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FkContract")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContract");

                    b.Property<Guid>("FkContractType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkContractType");

                    b.Property<Guid?>("FkCustomer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustomer");

                    b.Property<Guid?>("FkLocation1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation1");

                    b.Property<Guid?>("FkLocation2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation2");

                    b.Property<Guid?>("FkLocation3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkLocation3");

                    b.Property<Guid?>("FkPacking")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPacking");

                    b.Property<Guid?>("FkProduct")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkProduct");

                    b.Property<int>("FkSalmali")
                        .HasColumnType("int")
                        .HasColumnName("fkSalmali");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(25,5)");

                    b.Property<decimal?>("WeightIn")
                        .HasColumnType("decimal(25,5)");

                    b.Property<decimal?>("WeightMovement")
                        .HasColumnType("decimal(25,5)");

                    b.Property<decimal?>("WeightOut")
                        .HasColumnType("decimal(25,5)");

                    b.HasKey("Id");

                    b.ToTable("TblStoreLog");
                });

            modelBuilder.Entity("web_db.TblTemp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateTaiid")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkSalMali")
                        .HasColumnType("int");

                    b.Property<Guid>("FkuserAdd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkuserTaiid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Sign")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SignTaiid")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Txt")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("FkSalMali");

                    b.HasIndex("FkuserAdd");

                    b.HasIndex("FkuserTaiid");

                    b.ToTable("TblTemps");
                });

            modelBuilder.Entity("web_db.TblTempRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("A")
                        .HasColumnType("bit");

                    b.Property<bool>("ColorZani")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FkLocation1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkLocation2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkLocation3")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkUserAdd")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FkUserEdit")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fktemp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Formalin")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("M")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxDama")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MinDama")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MotorDama")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Nezafat")
                        .HasColumnType("bit");

                    b.Property<string>("O")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("R")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SamPashi")
                        .HasColumnType("bit");

                    b.Property<bool>("Tahvie")
                        .HasColumnType("bit");

                    b.Property<string>("Txt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fktemp");

                    b.ToTable("TblTempRows");
                });

            modelBuilder.Entity("web_db.TblUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<bool>("IsDel")
                        .HasColumnType("bit")
                        .HasColumnName("isDel");

                    b.Property<string>("Mob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mob");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("roles");

                    b.Property<int>("Salmalidef")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("TblUser");
                });

            modelBuilder.Entity("web_db.TblUserPermi", b =>
                {
                    b.Property<Guid>("FkPortageType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkPortageType");

                    b.Property<Guid>("FkUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUser");

                    b.Property<bool>("IsIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInBack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutBack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsType")
                        .HasColumnType("bit");

                    b.HasKey("FkPortageType", "FkUser");

                    b.ToTable("TblUserPermis");
                });

            modelBuilder.Entity("web_db.TblUserSal", b =>
                {
                    b.Property<Guid>("FkUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkUser");

                    b.Property<int>("FkSal")
                        .HasColumnType("int")
                        .HasColumnName("fkSal");

                    b.HasKey("FkUser", "FkSal");

                    b.HasIndex("FkSal");

                    b.ToTable("TblUserSal");
                });

            modelBuilder.Entity("web_db.ViewListAshkhasPortageEroor", b =>
                {
                    b.Property<long>("Code")
                        .HasColumnType("bigint")
                        .HasColumnName("code");

                    b.Property<Guid>("Expr1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkCustomer")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("fkCustomer");

                    b.Property<double>("Garardad")
                        .HasColumnType("float")
                        .HasColumnName("garardad");

                    b.ToView("View_ListAshkhasPortageEroor");
                });

            modelBuilder.Entity("web_db.TblContract", b =>
                {
                    b.HasOne("web_db.TblContractType", "FkContractTypeNavigation")
                        .WithMany("TblContracts")
                        .HasForeignKey("FkContractType")
                        .HasConstraintName("FK_TblContract_TblContractType")
                        .IsRequired();

                    b.HasOne("web_db.TblCustomer", "FkCustomerNavigation")
                        .WithMany("TblContracts")
                        .HasForeignKey("FkCustomer")
                        .HasConstraintName("FK_TblContract_TblCustomer")
                        .IsRequired();

                    b.Navigation("FkContractTypeNavigation");

                    b.Navigation("FkCustomerNavigation");
                });

            modelBuilder.Entity("web_db.TblContractPacking", b =>
                {
                    b.HasOne("web_db.TblContract", "FkContractNavigation")
                        .WithMany("TblContractPackings")
                        .HasForeignKey("FkContract")
                        .HasConstraintName("FK_TblContractPacking_TblContract")
                        .IsRequired();

                    b.HasOne("web_db.TblPacking", "FkPackingNavigation")
                        .WithMany("TblContractPackings")
                        .HasForeignKey("FkPacking")
                        .HasConstraintName("FK_TblContractPacking_TblPacking")
                        .IsRequired();

                    b.Navigation("FkContractNavigation");

                    b.Navigation("FkPackingNavigation");
                });

            modelBuilder.Entity("web_db.TblContractProduct", b =>
                {
                    b.HasOne("web_db.TblContract", "FkContractNavigation")
                        .WithMany("TblContractProducts")
                        .HasForeignKey("FkContract")
                        .HasConstraintName("FK_TblContractProduct_TblContract")
                        .IsRequired();

                    b.HasOne("web_db.TblProduct", "FkProductNavigation")
                        .WithMany("TblContractProducts")
                        .HasForeignKey("FkProduct")
                        .HasConstraintName("FK_TblContractProduct_TblProduct")
                        .IsRequired();

                    b.Navigation("FkContractNavigation");

                    b.Navigation("FkProductNavigation");
                });

            modelBuilder.Entity("web_db.TblContractType", b =>
                {
                    b.HasOne("web_db.TblSalMali", "FkSalmaliNavigation")
                        .WithMany("TblContractTypes")
                        .HasForeignKey("FkSalmali")
                        .HasConstraintName("FK_TblContractType_TblSalMali")
                        .IsRequired();

                    b.Navigation("FkSalmaliNavigation");
                });

            modelBuilder.Entity("web_db.TblCustomerGroup", b =>
                {
                    b.HasOne("web_db.TblCustomer", "FkCustumerNavigation")
                        .WithMany("TblCustomerGroups")
                        .HasForeignKey("FkCustumer")
                        .HasConstraintName("FK_TblCustomerGroup_TblCustomer")
                        .IsRequired();

                    b.HasOne("web_db.TblGroup", "FkGroupNavigation")
                        .WithMany("TblCustomerGroups")
                        .HasForeignKey("FkGroup")
                        .HasConstraintName("FK_TblContractGroup_TblGroup")
                        .IsRequired();

                    b.Navigation("FkCustumerNavigation");

                    b.Navigation("FkGroupNavigation");
                });

            modelBuilder.Entity("web_db.TblLocation", b =>
                {
                    b.HasOne("web_db.TblLocation", "FkPNavigation")
                        .WithMany("InverseFkPNavigation")
                        .HasForeignKey("FkP")
                        .HasConstraintName("FK_TblLocation_TblLocation");

                    b.Navigation("FkPNavigation");
                });

            modelBuilder.Entity("web_db.TblPortage", b =>
                {
                    b.HasOne("web_db.TblCar", "FkCarNavigation")
                        .WithMany("TblPortages")
                        .HasForeignKey("FkCar")
                        .HasConstraintName("FK_TblPortage_TblCar");

                    b.HasOne("web_db.TblContractType", "FkContracttypeNavigation")
                        .WithMany("TblPortages")
                        .HasForeignKey("FkContracttype")
                        .HasConstraintName("FK_TblPortage_TblContractType")
                        .IsRequired();

                    b.HasOne("web_db.TblCustomer", "FkCustomerNavigation")
                        .WithMany("TblPortages")
                        .HasForeignKey("FkCustomer")
                        .HasConstraintName("FK_TblPortage_TblCustomer")
                        .IsRequired();

                    b.Navigation("FkCarNavigation");

                    b.Navigation("FkContracttypeNavigation");

                    b.Navigation("FkCustomerNavigation");
                });

            modelBuilder.Entity("web_db.TblPortageDocument", b =>
                {
                    b.HasOne("web_db.TblPortage", "FkPortageNavigation")
                        .WithMany("TblPortageDocuments")
                        .HasForeignKey("FkPortage")
                        .HasConstraintName("FK_TblPortageDocument_TblPortage")
                        .IsRequired();

                    b.Navigation("FkPortageNavigation");
                });

            modelBuilder.Entity("web_db.TblPortageInjury", b =>
                {
                    b.HasOne("web_db.TblInjury", "FkInjuryNavigation")
                        .WithMany("TblPortageInjuries")
                        .HasForeignKey("FkInjury")
                        .HasConstraintName("FK_TblPortageInjury_TblInjury")
                        .IsRequired();

                    b.HasOne("web_db.TblPortage", "FkPortageNavigation")
                        .WithMany("TblPortageInjuries")
                        .HasForeignKey("FkPortage")
                        .HasConstraintName("FK_TblPortageInjury_TblPortage")
                        .IsRequired();

                    b.Navigation("FkInjuryNavigation");

                    b.Navigation("FkPortageNavigation");
                });

            modelBuilder.Entity("web_db.TblPortageMoney", b =>
                {
                    b.HasOne("web_db.TblContract", "FkContractNavigation")
                        .WithMany("TblPortageMoneys")
                        .HasForeignKey("FkContract")
                        .HasConstraintName("FK_TblPortageMoney_TblContract");

                    b.HasOne("web_db.TblCustomer", "FkCustomerNavigation")
                        .WithMany("TblPortageMoneys")
                        .HasForeignKey("FkCustomer")
                        .HasConstraintName("FK_TblPortageMoney_TblCustomer")
                        .IsRequired();

                    b.HasOne("web_db.TblPortage", "FkPortageNavigation")
                        .WithMany("TblPortageMoneys")
                        .HasForeignKey("FkPortage")
                        .HasConstraintName("FK_TblPortageMoney_TblPortage")
                        .IsRequired();

                    b.Navigation("FkContractNavigation");

                    b.Navigation("FkCustomerNavigation");

                    b.Navigation("FkPortageNavigation");
                });

            modelBuilder.Entity("web_db.TblPortageRow", b =>
                {
                    b.HasOne("web_db.TblContract", "FkContractNavigation")
                        .WithMany("TblPortageRows")
                        .HasForeignKey("FkContract")
                        .HasConstraintName("FK_TblPortageRow_TblContract");

                    b.HasOne("web_db.TblPortage", "FkPortageNavigation")
                        .WithMany("TblPortageRows")
                        .HasForeignKey("FkPortage")
                        .HasConstraintName("FK_TblPortageRow_TblPortage");

                    b.Navigation("FkContractNavigation");

                    b.Navigation("FkPortageNavigation");
                });

            modelBuilder.Entity("web_db.TblPortageRowInjury", b =>
                {
                    b.HasOne("web_db.TblInjury", "FkInjuryNavigation")
                        .WithMany("TblPortageRowInjuries")
                        .HasForeignKey("FkInjury")
                        .HasConstraintName("FK_TblPortageRowInjury_TblInjury")
                        .IsRequired();

                    b.HasOne("web_db.TblPortageRow", "FkPortageRowNavigation")
                        .WithMany("TblPortageRowInjuries")
                        .HasForeignKey("FkPortageRow")
                        .HasConstraintName("FK_TblPortageRowInjury_TblPortageRow")
                        .IsRequired();

                    b.Navigation("FkInjuryNavigation");

                    b.Navigation("FkPortageRowNavigation");
                });

            modelBuilder.Entity("web_db.TblTemp", b =>
                {
                    b.HasOne("web_db.TblUser", "UserAdd")
                        .WithMany()
                        .HasForeignKey("FkuserAdd")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_db.TblUser", "UserTaiid")
                        .WithMany()
                        .HasForeignKey("FkuserTaiid");

                    b.Navigation("UserAdd");

                    b.Navigation("UserTaiid");
                });

            modelBuilder.Entity("web_db.TblTempRow", b =>
                {
                    b.HasOne("web_db.TblTemp", "FktempNavigation")
                        .WithMany("TblTempRows")
                        .HasForeignKey("Fktemp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FktempNavigation");
                });

            modelBuilder.Entity("web_db.TblUserSal", b =>
                {
                    b.HasOne("web_db.TblSalMali", "FkSalNavigation")
                        .WithMany("TblUserSals")
                        .HasForeignKey("FkSal")
                        .HasConstraintName("FK_TblUserSal_TblSalMali")
                        .IsRequired();

                    b.HasOne("web_db.TblUser", "FkUserNavigation")
                        .WithMany("TblUserSals")
                        .HasForeignKey("FkUser")
                        .HasConstraintName("FK_TblUserSal_TblUser")
                        .IsRequired();

                    b.Navigation("FkSalNavigation");

                    b.Navigation("FkUserNavigation");
                });

            modelBuilder.Entity("web_db.TblCar", b =>
                {
                    b.Navigation("TblPortages");
                });

            modelBuilder.Entity("web_db.TblContract", b =>
                {
                    b.Navigation("TblContractPackings");

                    b.Navigation("TblContractProducts");

                    b.Navigation("TblPortageMoneys");

                    b.Navigation("TblPortageRows");
                });

            modelBuilder.Entity("web_db.TblContractType", b =>
                {
                    b.Navigation("TblContracts");

                    b.Navigation("TblPortages");
                });

            modelBuilder.Entity("web_db.TblCustomer", b =>
                {
                    b.Navigation("TblContracts");

                    b.Navigation("TblCustomerGroups");

                    b.Navigation("TblPortageMoneys");

                    b.Navigation("TblPortages");
                });

            modelBuilder.Entity("web_db.TblGroup", b =>
                {
                    b.Navigation("TblCustomerGroups");
                });

            modelBuilder.Entity("web_db.TblInjury", b =>
                {
                    b.Navigation("TblPortageInjuries");

                    b.Navigation("TblPortageRowInjuries");
                });

            modelBuilder.Entity("web_db.TblLocation", b =>
                {
                    b.Navigation("InverseFkPNavigation");
                });

            modelBuilder.Entity("web_db.TblPacking", b =>
                {
                    b.Navigation("TblContractPackings");
                });

            modelBuilder.Entity("web_db.TblPortage", b =>
                {
                    b.Navigation("TblPortageDocuments");

                    b.Navigation("TblPortageInjuries");

                    b.Navigation("TblPortageMoneys");

                    b.Navigation("TblPortageRows");
                });

            modelBuilder.Entity("web_db.TblPortageRow", b =>
                {
                    b.Navigation("TblPortageRowInjuries");
                });

            modelBuilder.Entity("web_db.TblProduct", b =>
                {
                    b.Navigation("TblContractProducts");
                });

            modelBuilder.Entity("web_db.TblSalMali", b =>
                {
                    b.Navigation("TblContractTypes");

                    b.Navigation("TblUserSals");
                });

            modelBuilder.Entity("web_db.TblTemp", b =>
                {
                    b.Navigation("TblTempRows");
                });

            modelBuilder.Entity("web_db.TblUser", b =>
                {
                    b.Navigation("TblUserSals");
                });
#pragma warning restore 612, 618
        }
    }
}
